[[plugins]]
repo = 'Shougo/dein.vim'

# color scheme
# [[plugins]]
# repo = 'lifepillar/vim-solarized8'
# hook_add = '''
# set background=dark
# '''

# color scheme
[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'dracula/vim'

# color scheme
# [[plugins]]
# repo = 'raphamorim/lucario'
# 
# # color scheme
# [[plugins]]
# repo = 'joshdick/onedark.vim'
# 
# terminal
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
let g:neoterm_size = '20'
let g:neoterm_default_mod = ':belowright'
let g:neoterm_autoinsert = '1'

" Escape terminal mode
tnoremap <silent> <ESC> <C-\><C-n> <C-w><C-k>
" hide/close terminal
nnoremap <silent> ,th :call neoterm#close()<cr>
" clear terminal
nnoremap <silent> ,tl :call neoterm#clear()<cr>
nnoremap <silent> ,tn :T source $HOME/.bash_profile<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap [fugitive]  <Nop>
nmap <space>g [fugitive]
nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
nnoremap <silent> [fugitive]l :Glog<CR>
nnoremap <silent> [fugitive]d :Gdiff<CR><C-w>L
nnoremap <silent> [fugitive]a :Gwrite<CR>
nnoremap <silent> [fugitive]c :Gcommit<CR>
'''

# fugitive integration with hub
# Use for GBrowse for now
[[plugins]]
repo = "tpope/vim-rhubarb"

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <C-e> :NERDTreeToggle<CR>
'''
# autocmd vimenter * NERDTree

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
        \ 'colorscheme': 'dracula',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
                \  'left': [ [ 'mode', 'paste' ], [ 'readonly', 'relativepath'], ['gitbranch']],
                \ 'right': [ [ 'lineinfo' ],
                \            [ 'percent' ],
                \            [ 'ale', 'fileformat', 'fileencoding', 'filetype'] ] 
                \},
        \ 'component_function': {
                \   'gitbranch': 'FugitiveHead',
                \    'ale': 'ALEGetStatusLine',
                \   'filetype': 'MyFiletype',
                \   'fileformat': 'MyFileformat'
                \ }
        \ }

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'

hook_add='''
" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'w0rp/ale'
hook_add= '''
" エラー行に表示するマーク
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'
" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" エラー表示の列を常時表示
let g:ale_sign_column_always = 1

" ファイルを開いたときにlint実行
let g:ale_lint_on_enter = 1
" ファイルを保存したときにlint実行
let g:ale_lint_on_save = 1
" 編集中のlintはしない
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 1
" Set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1

" lint結果をロケーションリストとQuickFixには表示しない
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

" 行末尾にmessageが表示される
let g:ale_virtualtext_cursor = 1

" 有効にするlinter
let g:ale_linters = {
\   'python': ['flake8', 'mypy'],
\   'javascript': ['eslint'],
\}

let g:ale_fixers = {
\    'python': ['yapf']
\}

" disable java files linting
let g:ale_pattern_options = {'\.java$': {'ale_linters': [], 'ale_fixers': []}}

" ALE用プレフィックス
nmap [ale] <Nop>
map <Leader>a [ale]
" エラー行にジャンプ
nmap <silent> [ale]p <Plug>(ale_previous)
nmap <silent> [ale]n <Plug>(ale_next)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
    \ '_' : {
        \ 'outputter' : 'error',
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error'   : 'quickfix',
        \ 'outputter/buffer/split' : ':botright 8sp',
    \ },
    \ 'python/test': {
        \ 'command': 'python',
        \ 'exec': '%c %o',
        \ 'cmdopt': '-m unittest'
    \}
\}

" 実行時に前回の表示内容をクローズ&保存してから実行
let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'jiangmiao/auto-pairs'
hook_add = '''
  let g:AutoPairsShortcutToggle = '<Leader>bp'
  let g:AutoPairsShortcutFastWrap = '´'
  let g:AutoPairsShortcutJump = '˜˜'
  let g:AutoPairsShortcutBackInsert = '∫'
'''

# fish file highlight, autoindent, and so on 
[[plugins]]
repo = 'dag/vim-fish'

# show indent line like VS Code 
[[plugins]]
repo = 'Yggdroot/indentLine'

# dev icons 
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# enhance operations to text object
[[plugins]]
repo = 'tpope/vim-surround'

# enable repeat dot command for vim-surround operations
[[plugins]]
repo = 'tpope/vim-repeat'

# vim-dispatch executes exeternal commands asynchronously
[[plugins]]
repo = 'tpope/vim-dispatch'

# arbitrary test runner
[[plugins]]
repo = 'janko-m/vim-test'
depends = ['vim-dispatch']
hook_add = '''
nmap [test] <Nop>
map <Leader>t [test]
nmap <silent> [test]n :<C-u>TestNearest<CR>
nmap <silent> [test]f :<C-u>TestFile<CR>
nmap <silent> [test]s :<C-u>TestSuite<CR>
nmap <silent> [test]l :<C-u>TestLast<CR>
nmap <silent> [test]g :<C-u>TestVisit<CR>
let g:test#strategy = 'neovim'
let g:test#python#runner = 'nose'
'''

[[plugins]]
repo = 'radenling/vim-dispatch-neovim'
depends = ['vim-dispatch']

# for grammar check by :GrammarousCheck command
[[plugins]]
repo = 'rhysd/vim-grammarous'

# for opening URI in texts
[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''
