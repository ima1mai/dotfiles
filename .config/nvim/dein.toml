[[plugins]]
repo = 'Shougo/dein.vim'

# color scheme
# [[plugins]]
# repo = 'lifepillar/vim-solarized8'
# hook_add = '''
# set background=dark
# '''

# color scheme
[[plugins]]
repo = 'jacoborus/tender.vim'

# color scheme
# [[plugins]]
# repo = 'raphamorim/lucario'
# 
# # color scheme
# [[plugins]]
# repo = 'joshdick/onedark.vim'
# 
# terminal
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
let g:neoterm_size = '20'
let g:neoterm_default_mod = ':belowright'
let g:neoterm_autoinsert = '1'

" Escape terminal mode
tnoremap <silent> <ESC> <C-\><C-n> <C-w><C-k>
" hide/close terminal
nnoremap <silent> ,th :call neoterm#close()<cr>
" clear terminal
nnoremap <silent> ,tl :call neoterm#clear()<cr>
nnoremap <silent> <Leader>t :T source $HOME/.bash_profile<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap [fugitive]  <Nop>
nmap <space>g [fugitive]
nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
nnoremap <silent> [fugitive]l :Glog<CR>
nnoremap <silent> [fugitive]d :Gdiff<CR><C-w>L
nnoremap <silent> [fugitive]a :Gwrite<CR>
nnoremap <silent> [fugitive]c :Gcommit<CR>
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <C-e> :NERDTreeToggle<CR>
'''
# autocmd vimenter * NERDTree

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = { 'colorscheme': 'tender' }
let g:lightline = {
        \ 'colorscheme': 'tender',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
                \  'left': [ [ 'mode', 'paste' ], [ 'readonly', 'relativepath'], ['gitbranch']],
                \ 'right': [ [ 'lineinfo' ],
                \            [ 'percent' ],
                \            [ 'ale', 'fileformat', 'fileencoding', 'filetype'] ] 
                \},
        \ 'component_function': {
                \   'gitbranch': 'fugitive#head',
                \    'ale': 'ALEGetStatusLine'
                \ }
        \ }
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
on_event = 'BufRead'
hook_add = '''
nmap [denite] <Nop>
map <Leader>d [denite]
" reference: https://qiita.com/okamos/items/4e1665ecd416ef77df7c
nnoremap <silent> [denite]f :<C-u>Denite filetype<CR>
nnoremap <silent> [denite]p :<C-u>Denite file_rec<CR>
nnoremap <silent> [denite]v :<C-u>Denite -default-action=vsplit file_rec<CR>
nnoremap <silent> [denite]s :<C-u>Denite -default-action=split file_rec<CR>
nnoremap <silent> [denite]t :<C-u>Denite -default-action=tabopen file_rec<CR>
nnoremap <silent> [denite]j :<C-u>Denite line<CR>
nnoremap <silent> [denite]g :<C-u>Denite grep<CR>
nnoremap <silent> [denite]] :<C-u>DeniteCursorWord grep<CR>
nnoremap <silent> [denite]u :<C-u>Denite file_mru<CR>
nnoremap <silent> [denite]y :<C-u>Denite neoyank<CR>
nnoremap <silent> [denite]r :<C-u>Denite -resume<CR>
nnoremap <silent> [denite]; :<C-u>Denite -resume -immediately -select=+1<CR>
nnoremap <silent> [denite]- :<C-u>Denite -resume -immediately -select=-1<CR>
nnoremap <silent> [denite]d :<C-u>call denite#start([{'name': 'file_rec', 'args': ['~/.ghq/github.com/ryom1m1/dotfiles']}])<CR>
nnoremap ml :<C-p>call denite#start([{'name': 'file_rec', 'args': [g:memolist_path]}])<CR>
'''
hook_post_source = '''
call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm'])
" Ag command on grep source
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts',
		\ ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'w0rp/ale'
hook_add= '''
" エラー行に表示するマーク
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'
" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" エラー表示の列を常時表示
let g:ale_sign_column_always = 1

" ファイルを開いたときにlint実行
let g:ale_lint_on_enter = 1
" ファイルを保存したときにlint実行
let g:ale_lint_on_save = 1
" 編集中のlintはしない
let g:ale_lint_on_text_changed = 'never'

" lint結果をロケーションリストとQuickFixには表示しない
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

" 有効にするlinter
let g:ale_linters = {
\   'python': ['pyflakes'],
\   'javascript': ['eslint'],
\}

" disable java files linting
let g:ale_pattern_options = {'\.java$': {'ale_linters': [], 'ale_fixers': []}}

" ALE用プレフィックス
nmap [ale] <Nop>
map <C-k> [ale]
" エラー行にジャンプ
nmap <silent> [ale]<C-P> <Plug>(ale_previous)
nmap <silent> [ale]<C-N> <Plug>(ale_next)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
    \ '_' : {
        \ 'outputter' : 'error',
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error'   : 'quickfix',
        \ 'outputter/buffer/split' : ':botright 8sp',
    \ },
    \ 'python/test': {
        \ 'command': 'python',
        \ 'exec': '%c %o',
        \ 'cmdopt': '-m unittest'
    \}
\}

" 実行時に前回の表示内容をクローズ&保存してから実行
let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'jiangmiao/auto-pairs'
hook_add = '''
  let g:AutoPairsShortcutToggle = '<Leader>bp'
  let g:AutoPairsShortcutFastWrap = '´'
  let g:AutoPairsShortcutJump = '˜˜'
  let g:AutoPairsShortcutBackInsert = '∫'
'''

