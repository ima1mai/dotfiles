# completion
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source='''
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''
hook_post_source = '''
let g:deoplete#omni_patterns = {}
'''

# python completion
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_i = 1
on_ft = 'python'

# javascript completion
[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_i = 1
on_ft = 'javascript'

# python virtualenv enable in vim
[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = 'python'

# python autoindent by pep8 style
repo = 'Vimjas/vim-python-pep8-indent'
on_i = 1
on_ft = 'python'

# python test result compiler for vim-dispatch
[[plugins]]
repo = 'aliev/vim-compiler-python'
on_ft = 'python'

# snippet
[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
hook_post_source = '''
  let g:neosnippet#snippets_directory='~/.cache/nvim/dein/repos/github.com/honza/vim-snippets/snippets'
'''
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets','vim-snippets']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'mhartington/nvim-typescript'
on_i  = 1
on_ft = 'typescript'

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev  = 'next'
build = './install.sh'
on_ft = 'java'
hook_source = '''
  let g:LanguageClient_autoStart = 0
  let g:LanguageClient_diagnosticsEnable = 1 
  let l:jdt_repo_path = '~/eclipse/eclipse.jdt.ls/org.eclipse.jdt.ls.product/target/repository'
  let l:jdt_lsp_data_dir = '~/.config/nvim/other_tools/jdt-data'
  let l:workspace_path = '/Users/aa367037/Dev/sbsep_workspace_for_vim'
  let g:LanguageClient_serverCommands = {
    \ 'java': ['java',
      \ '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044',
      \ '-Declipse.application=org.eclipse.jdt.ls.core.id1',
      \ '-Dosgi.bundles.defaultStartLevel=4',
      \ '-Declipse.product=org.eclipse.jdt.ls.core.product',
      \ '-Dlog.level=ALL',
      \ '-noverify',
      \ '-Xmx1G',
      \ '-jar',
      \ expand(l:jdt_repo_path) . '/plugins/org.eclipse.equinox.launcher_1.5.0.v20180207-1446.jar',
      \ '-configuration',
      \ expand(l:jdt_repo_path) . '/config_mac',
      \ '-data',
      \ l:workspace_path]
    \ }
nmap [LanguageClient] <Nop>
map <Leader>e [LanguageClient]
nmap [LanguageClient]h :call LanguageClient#textDocument_hover()<CR>
nmap [LanguageClient]d :call LanguageClient#textDocument_definition()<CR>
nmap [LanguageClient]rn :call LanguageClient#textDocument_rename()<CR>
nmap [LanguageClient]s :call LanguageClient#textDocument_documentSymbol() <CR> :lopen <CR>
nmap [LanguageClient]r :call LanguageClient#textDocument_references() <CR> :lopen <CR>
nmap [LanguageClient]= :call LanguageClient#textDocument_formatting() <CR>
'''
hook_post_source = '''
  "call LanguageClient#startServer()
'''

